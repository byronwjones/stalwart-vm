<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BWJ.DataObjects</name>
    </assembly>
    <members>
        <member name="T:BWJ.DataObjects.StalwartVM">
            <summary>
            View model base class.  Ideally, view models derived from this class are only instanciated once
            and remain in place for the lifetime of the application.
            </summary>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM.DependsUpon(System.String)">
            <summary>
            Declares a supporting property - that is, one that another property is dependent upon. 
            </summary>
            <remarks>Intended to be invoked within a value computation function inside a get accessor that computes 
            its returned value using properties external to this object.
            Useful when dependance upon a collection, collection item, or some other view model's property is desired,
            as this object cannot automatically detect when such external properties are being used.
            This method should also be used to declare supporting properties invoked within code blocks 
            which may not necessarily be called every time the value computation function is invoked 
            (e.g. conditional statements)</remarks>
            <param name="property">Supporting property name</param>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM.NotifyDependentProperties(System.String)">
            <summary>
            Causes the PropertyChanged event to be raised for every dependent property, that is, one with a
            value computed in part by using the property with the given name
            </summary>
            <param name="supportingProperty">Property name</param>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM.NotifyChanged(System.String)">
            <summary>
            Raises PropertyChanged event for the property with the given name, and subsequently raises the
            PropertyChanged event any property dependent on the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM.get``1(System.String,``0)">
            <summary>
            Declares the given property as potentially supporting another property,
            while also returning the property's value
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="property">Property name</param>
            <param name="returnValue">Property value</param>
            <returns>Property value</returns>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM.get``1(System.String,System.Func{``0})">
            <summary>
            Computes and returns the value of the property with the given name.
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="property">Property name</param>
            <param name="valueComputationFunc">Function computing the value returned by the given
            property's get accessor.</param>
            <remarks>The properties for any get accessors invoked during the invocation of this
            function will be considered supporters of the given property</remarks>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM.EvaluatePotentialSupportingProperty(System.String)">
            <summary>
            Determines if the given property is a supporting property, configuring it as such if it is
            </summary>
            <remarks>This method is called whenever any get accessor implementing
            either <see cref="M:BWJ.DataObjects.StalwartVM.get``1(System.String,``0)"/> or <seealso cref="M:BWJ.DataObjects.StalwartVM.get``1(System.String,System.Func{``0})"/> is invoked.
            If the get accessor for the property calling this method (A) was invoked during the invocation of 
            the get accessor for another property (B), it is understood that (B) depends on (A) to compute its value, 
            meaning that (A) is in fact a supporting property.</remarks>
            <param name="property">Name of property being evaluated</param>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM.SubscribeToChange(System.String,System.String)">
            <summary>
            Configure the given dependent property to raise the PropertyChanged event whenever the given
            supporting property's value changes
            </summary>
            <remarks>
            The basic idea here is that properties with a value computed from other properties
            depend on those properties -- they are DEPENDENTS. The properties that dependent properties
            use to compute their values are SUPPORTERS. A dependent property's value has likely changed if any 
            of its supporting properties' values have changed.  So when supporting property changes,
            events are raised notifying subscribers of not only that change, but also to changes of 
            its dependent properties.
            A list is maintained for each supporting property containing all of its dependent properties. 
            When we raise PropertyChanged for a supporting property, we use the list to raise
            PropertyChanged for each of its dependent properties.
            </remarks>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM.CopyToList``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Copies the items from the given source to the given target
            </summary>
        </member>
        <member name="F:BWJ.DataObjects.StalwartVM.changeSubscriptions">
            <summary>
            A dictionary of supporting properties, and a hash set of their dependents
            </summary>
        </member>
        <member name="T:BWJ.DataObjects.StalwartVM`1">
            <summary>
            Base class for a view model intended to derive its values from and potentially write its values back
            to a simple entity object
            </summary>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM`1.ToEntity">
            <summary>
            Updates an entity object with the values from this view model
            </summary>
            <remarks>If an object was provided to this view model's constructor, or to the last call to
            <see cref="M:BWJ.DataObjects.StalwartVM`1.BindEntity(`0)"/>, the same object instance will be updated and returned.
            If this method is overriden, it should call the base method in order to behave properly.
            </remarks>
            <returns>Entity object</returns>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM`1.BindEntity(`0)">
            <summary>
            Populates this view model with values from the given object
            </summary>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM`1.CustomizeToEntity(`0)">
            <summary>
            Provided as an entry point for developers to introduce additional logic in the
            <see cref="M:BWJ.DataObjects.StalwartVM`1.ToEntity"/> method in scenarios where objects derived from this class are generated by
            a code templating tool
            </summary>
        </member>
        <member name="M:BWJ.DataObjects.StalwartVM`1.CustomizeBindEntity(`0)">
            <summary>
            Provided as an entry point for developers to introduce additional logic in the
            <see cref="M:BWJ.DataObjects.StalwartVM`1.BindEntity(`0)"/> method in scenarios where objects derived from this class
            are generated by a code templating tool
            </summary>
        </member>
    </members>
</doc>
